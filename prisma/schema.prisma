
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Generator for Prisma Client
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

// User model
model User {
  id                  String   @id @default(uuid())
  firstName           String
  lastName            String
  phoneNumber         String   @unique
  email               String?  @unique
  county              String?
  town                String?
  gender              String
  password            String
  roles               String[]
  permissions Permission[] @relation("UserPermissions")
  resetCode           String?    
  resetCodeExpiresAt  DateTime?  
  otpAttempts         Int        @default(0) 
  createdAt           DateTime   @default(now())
   tasksAssigned       TaskAssignee[]
   bagsHeld          Int?
  notifications Notification[] @relation("UserNotifications")  // New relation
}

  


model Permission {
  id   String  @id @default(uuid())
  name String  @unique // Permission name (e.g., "read:Customer")
  users User[] @relation("UserPermissions") // Relation back to User
}

// Customer model
model Customer {
  id                    String                  @id @default(uuid())
  firstName             String
  lastName              String
  email                 String?
  phoneNumber           String                  @unique
  secondaryPhoneNumber  String?
  gender                String?
  county                String?
  town                  String?
  location              String?
  estateName            String?                 
  building              String?                 
  houseNumber           String?                 
  category              String?
  monthlyCharge         Float
  status                CustomerStatus          @default(ACTIVE)
  garbageCollectionDay  GarbageCollectionDay
  collected             Boolean                 @default(false)  
  closingBalance        Float                   @default(0) 

  invoices              Invoice[]
  receipts              Receipt[]
  garbageCollectionHistory GarbageCollectionHistory[] 
  trashBagIssuanceHistory TrashBagIssuance[]
}


model Task {
  id        String   @id @default(uuid())
  type      String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  declaredBags Int?
  createdBy String ? // Add this field to track the user who created the task

  trashBagIssuances TrashBagIssuance[] 
  taskAssignees     TaskAssignee[]
}



model Notification {
  id          String   @id @default(uuid())
  message     String
  status      String   @default("UNREAD")  // The status of the notification (e.g., UNREAD, READ)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   // Foreign key to the User
  user        User     @relation("UserNotifications", fields: [userId], references: [id])  // Define the correct relation
}

model TaskAssignee {
  id           String @id @default(uuid())
  taskId       String
  assigneeId   String // Renamed from collectorId to assigneeId for general tasks
  task         Task   @relation(fields: [taskId], references: [id])
  assignee     User   @relation(fields: [assigneeId], references: [id])
}

model TrashBagIssuance {
  id            String   @id @default(uuid())
  taskId        String
  customerId    String
  issuedDate    DateTime @default(now())
  bagsIssued    Boolean  // Boolean to track if bags were issued
  customer      Customer @relation(fields: [customerId], references: [id])
  task          Task     @relation(fields: [taskId], references: [id])
}


// GarbageCollectionHistory model
model GarbageCollectionHistory {
  id             String     @id @default(uuid())
  customerId     String     
  collectionDate DateTime   @default(now())
  collected      Boolean    @default(false) 

  customer       Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

// Invoice model
model Invoice {
  id                  String       @id @default(uuid())
  customerId          String
  invoicePeriod       DateTime
  invoiceNumber       String       @unique 
  invoiceAmount       Float        
  closingBalance      Float        
  status              InvoiceStatus @default(UNPAID) 
  isSystemGenerated   Boolean    
  createdAt           DateTime     @default(now())
  amountPaid          Float        @default(0) 

  customer            Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items               InvoiceItem[]
  receiptInvoices     ReceiptInvoice[] @relation("InvoiceReceipts")
}

// InvoiceItem model
model InvoiceItem {
  id          String   @id @default(uuid())
  invoiceId   String
  description String   
  amount      Float    
  quantity    Int      

  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

// Receipt model
model Receipt {
  id             String      @id @default(uuid())
  receiptNumber  String      @unique 
  amount         Float
  modeOfPayment  ModeOfPayment
  paidBy         String?
  transactionCode String?
  phoneNumber    String?
  paymentId      String @unique 

  payment        Payment ? @relation(fields: [paymentId], references: [id], onDelete: Cascade)   
  receiptInvoices ReceiptInvoice[] @relation("InvoiceReceipts")
  customer       Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId     String
  createdAt      DateTime    @default(now())
}

// Payment model
model Payment {
  id             String      @id @default(uuid())
  amount         Float
  modeOfPayment  ModeOfPayment
  firstName      String?
  receipted      Boolean     @default(false)
  transactionId  String?     @unique 
  ref            String?  

  receipt        Receipt?    
  createdAt      DateTime    @default(now()) 
}

// ReceiptInvoice model
model ReceiptInvoice {
  id          String      @id @default(uuid())
  receiptId   String
  invoiceId   String

  receipt     Receipt?     @relation("InvoiceReceipts", fields: [receiptId], references: [id], onDelete: Cascade)
  invoice     Invoice?     @relation("InvoiceReceipts", fields: [invoiceId], references: [id], onDelete: Cascade)
}

// MpesaTransaction model
model MpesaTransaction {
  id              String      @id @default(uuid())
  TransID         String      @unique     
  TransTime       DateTime    
  TransAmount     Float       
  BillRefNumber   String  
  MSISDN          String      
  FirstName       String      
  processed       Boolean     @default(false) 
  createdAt       DateTime    @default(now()) 
}

// SMS model
model SMS {
  id           String   @id @default(uuid())
  clientsmsid  String      @unique
  customerId   String
  mobile       String
  message      String
  status       String
  createdAt    DateTime @default(now())
}



// Enums
enum CustomerStatus {
  ACTIVE
  DORMANT
}

enum GarbageCollectionDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum InvoiceStatus {
  UNPAID
  PAID
  PPAID
  CANCELLED
}

enum ModeOfPayment {
  CASH
  MPESA
  BANK
}


